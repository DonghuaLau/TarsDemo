// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __ACCOUNT_H_
#define __ACCOUNT_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "commondef.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace Account
{
    struct st_login_verify_req : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Account.st_login_verify_req";
        }
        static string MD5()
        {
            return "9eab7ad0c7111e003b349b6109a1da3d";
        }
        st_login_verify_req()
        :token_mode(0),platform(0),client_type(0)
        {
        }
        void resetDefautlt()
        {
            token_mode = 0;
            platform = 0;
            client_type = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(token_mode, 0);
            _os.write(user_info, 1);
            _os.write(cookie, 2);
            _os.write(platform, 3);
            _os.write(client_type, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(token_mode, 0, true);
            _is.read(user_info, 1, true);
            _is.read(cookie, 2, true);
            _is.read(platform, 3, true);
            _is.read(client_type, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(token_mode,"token_mode");
            _ds.display(user_info,"user_info");
            _ds.display(cookie,"cookie");
            _ds.display(platform,"platform");
            _ds.display(client_type,"client_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(token_mode, true);
            _ds.displaySimple(user_info, true);
            _ds.displaySimple(cookie, true);
            _ds.displaySimple(platform, true);
            _ds.displaySimple(client_type, false);
            return _os;
        }
    public:
        tars::Int32 token_mode;
        CommonDef::st_user_info user_info;
        map<std::string, std::string> cookie;
        tars::Int32 platform;
        tars::Int32 client_type;
    };
    inline bool operator==(const st_login_verify_req&l, const st_login_verify_req&r)
    {
        return l.token_mode == r.token_mode && l.user_info == r.user_info && l.cookie == r.cookie && l.platform == r.platform && l.client_type == r.client_type;
    }
    inline bool operator!=(const st_login_verify_req&l, const st_login_verify_req&r)
    {
        return !(l == r);
    }

    struct st_login_verify_rsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Account.st_login_verify_rsp";
        }
        static string MD5()
        {
            return "e3e2c290ceec0c08c24111a502d92b13";
        }
        st_login_verify_rsp()
        :ret(0),msg(""),uid(0)
        {
        }
        void resetDefautlt()
        {
            ret = 0;
            msg = "";
            uid = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(ret, 0);
            _os.write(msg, 1);
            _os.write(uid, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ret, 0, true);
            _is.read(msg, 1, true);
            _is.read(uid, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(ret,"ret");
            _ds.display(msg,"msg");
            _ds.display(uid,"uid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(ret, true);
            _ds.displaySimple(msg, true);
            _ds.displaySimple(uid, false);
            return _os;
        }
    public:
        tars::Int32 ret;
        std::string msg;
        tars::Int64 uid;
    };
    inline bool operator==(const st_login_verify_rsp&l, const st_login_verify_rsp&r)
    {
        return l.ret == r.ret && l.msg == r.msg && l.uid == r.uid;
    }
    inline bool operator!=(const st_login_verify_rsp&l, const st_login_verify_rsp&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class AccessPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~AccessPrxCallback(){}
        virtual void callback_verify( const Account::st_login_verify_rsp& rsp)
        { throw std::runtime_error("callback_verify() override incorrect."); }
        virtual void callback_verify_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_verify_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Access_all[]=
            {
                "verify"
            };
            pair<string*, string*> r = equal_range(__Access_all, __Access_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Access_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_verify_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    Account::st_login_verify_rsp rsp;
                    _is.read(rsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_verify(rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<AccessPrxCallback> AccessPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class AccessPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~AccessPrxCallbackPromise(){}
    public:
        struct Promiseverify: virtual public TC_HandleBase
        {
        public:
            Account::st_login_verify_rsp rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AccessPrxCallbackPromise::Promiseverify > PromiseverifyPtr;

        AccessPrxCallbackPromise(const promise::Promise< AccessPrxCallbackPromise::PromiseverifyPtr > &promise)
        : _promise_verify(promise)
        {}
        
        virtual void callback_verify(const AccessPrxCallbackPromise::PromiseverifyPtr &ptr)
        {
            _promise_verify.setValue(ptr);
        }
        virtual void callback_verify_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:verify_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_verify.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AccessPrxCallbackPromise::PromiseverifyPtr > _promise_verify;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Access_all[]=
            {
                "verify"
            };

            pair<string*, string*> r = equal_range(__Access_all, __Access_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Access_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_verify_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AccessPrxCallbackPromise::PromiseverifyPtr ptr = new AccessPrxCallbackPromise::Promiseverify();

                    try
                    {
                        _is.read(ptr->rsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_verify_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_verify_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_verify(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<AccessPrxCallbackPromise> AccessPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class AccessCoroPrxCallback: public AccessPrxCallback
    {
    public:
        virtual ~AccessCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Access_all[]=
            {
                "verify"
            };

            pair<string*, string*> r = equal_range(__Access_all, __Access_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Access_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_verify_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        Account::st_login_verify_rsp rsp;
                        _is.read(rsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_verify(rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_verify_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_verify_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<AccessCoroPrxCallback> AccessCoroPrxCallbackPtr;

    /* proxy for client */
    class AccessProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        void verify(const Account::st_login_verify_req & req,Account::st_login_verify_rsp &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            _os.write(rsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"verify", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            _is.read(rsp, 2, true);
        }

        void async_verify(AccessPrxCallbackPtr callback,const Account::st_login_verify_req &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"verify", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AccessPrxCallbackPromise::PromiseverifyPtr > promise_async_verify(const Account::st_login_verify_req &req,const map<string, string>& context)
        {
            promise::Promise< AccessPrxCallbackPromise::PromiseverifyPtr > promise;
            AccessPrxCallbackPromisePtr callback = new AccessPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"verify", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_verify(AccessCoroPrxCallbackPtr callback,const Account::st_login_verify_req &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"verify", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        AccessProxy* tars_hash(int64_t key)
        {
            return (AccessProxy*)ServantProxy::tars_hash(key);
        }

        AccessProxy* tars_consistent_hash(int64_t key)
        {
            return (AccessProxy*)ServantProxy::tars_consistent_hash(key);
        }

        AccessProxy* tars_set_timeout(int msecond)
        {
            return (AccessProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<AccessProxy> AccessPrx;

    /* servant for server */
    class Access : public tars::Servant
    {
    public:
        virtual ~Access(){}
        virtual void verify(const Account::st_login_verify_req & req,Account::st_login_verify_rsp &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_verify(tars::TarsCurrentPtr current, const Account::st_login_verify_rsp &rsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(rsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __Account__Access_all[]=
            {
                "verify"
            };

            pair<string*, string*> r = equal_range(__Account__Access_all, __Account__Access_all+1, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Account__Access_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Account::st_login_verify_req req;
                    Account::st_login_verify_rsp rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                        _is.read(rsp, 2, false);
                    }
                    verify(req,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(rsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
