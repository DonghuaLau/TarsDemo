// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.qq.tars.quickstart.client.testapp;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class st_cgi_req {

	@TarsStructProperty(order = 0, isRequire = true)
	public int mode = 0;
	@TarsStructProperty(order = 1, isRequire = true)
	public java.util.Map<String, String> query = null;

	public int getMode() {
		return mode;
	}

	public void setMode(int mode) {
		this.mode = mode;
	}

	public java.util.Map<String, String> getQuery() {
		return query;
	}

	public void setQuery(java.util.Map<String, String> query) {
		this.query = query;
	}

	public st_cgi_req() {
	}

	public st_cgi_req(int mode, java.util.Map<String, String> query) {
		this.mode = mode;
		this.query = query;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(mode);
		result = prime * result + TarsUtil.hashCode(query);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof st_cgi_req)) {
			return false;
		}
		st_cgi_req other = (st_cgi_req) obj;
		return (
			TarsUtil.equals(mode, other.mode) &&
			TarsUtil.equals(query, other.query) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(mode, 0);
		_os.write(query, 1);
	}

	static java.util.Map<String, String> cache_query;
	static { 
		cache_query = new java.util.HashMap<String, String>();
		String var_1 = "";
		String var_2 = "";
		cache_query.put(var_1 ,var_2);
	}

	public void readFrom(TarsInputStream _is) {
		this.mode = _is.read(mode, 0, true);
		this.query = (java.util.Map<String, String>) _is.read(cache_query, 1, true);
	}

}
