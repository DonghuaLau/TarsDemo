// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __HTTP_CGI_H_
#define __HTTP_CGI_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "commondef.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace HttpProto
{
    struct st_cgi_req : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "HttpProto.st_cgi_req";
        }
        static string MD5()
        {
            return "6bcd7f2a072576a6fb5d4d235036a468";
        }
        st_cgi_req()
        :mode(1),client_ip("")
        {
        }
        void resetDefautlt()
        {
            mode = 1;
            client_ip = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(mode, 0);
            _os.write(query, 1);
            _os.write(cookie, 2);
            _os.write(user_info, 3);
            if (client_ip != "")
            {
                _os.write(client_ip, 4);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mode, 0, true);
            _is.read(query, 1, true);
            _is.read(cookie, 2, true);
            _is.read(user_info, 3, false);
            _is.read(client_ip, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(mode,"mode");
            _ds.display(query,"query");
            _ds.display(cookie,"cookie");
            _ds.display(user_info,"user_info");
            _ds.display(client_ip,"client_ip");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(mode, true);
            _ds.displaySimple(query, true);
            _ds.displaySimple(cookie, true);
            _ds.displaySimple(user_info, true);
            _ds.displaySimple(client_ip, false);
            return _os;
        }
    public:
        tars::Int32 mode;
        map<std::string, std::string> query;
        map<std::string, std::string> cookie;
        CommonDef::st_user_info user_info;
        std::string client_ip;
    };
    inline bool operator==(const st_cgi_req&l, const st_cgi_req&r)
    {
        return l.mode == r.mode && l.query == r.query && l.cookie == r.cookie && l.user_info == r.user_info && l.client_ip == r.client_ip;
    }
    inline bool operator!=(const st_cgi_req&l, const st_cgi_req&r)
    {
        return !(l == r);
    }

    struct st_cgi_rsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "HttpProto.st_cgi_rsp";
        }
        static string MD5()
        {
            return "d42e5716eca49c942897abfb5af8d00f";
        }
        st_cgi_rsp()
        :ret(0),msg(""),out_json("")
        {
        }
        void resetDefautlt()
        {
            ret = 0;
            msg = "";
            out_json = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(ret, 0);
            _os.write(msg, 1);
            _os.write(out_json, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ret, 0, true);
            _is.read(msg, 1, true);
            _is.read(out_json, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(ret,"ret");
            _ds.display(msg,"msg");
            _ds.display(out_json,"out_json");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(ret, true);
            _ds.displaySimple(msg, true);
            _ds.displaySimple(out_json, false);
            return _os;
        }
    public:
        tars::Int32 ret;
        std::string msg;
        std::string out_json;
    };
    inline bool operator==(const st_cgi_rsp&l, const st_cgi_rsp&r)
    {
        return l.ret == r.ret && l.msg == r.msg && l.out_json == r.out_json;
    }
    inline bool operator!=(const st_cgi_rsp&l, const st_cgi_rsp&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class HttpCGIPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~HttpCGIPrxCallback(){}
        virtual void callback_get( const HttpProto::st_cgi_rsp& rsp)
        { throw std::runtime_error("callback_get() override incorrect."); }
        virtual void callback_get_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_get_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __HttpCGI_all[]=
            {
                "get"
            };
            pair<string*, string*> r = equal_range(__HttpCGI_all, __HttpCGI_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __HttpCGI_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_get_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    HttpProto::st_cgi_rsp rsp;
                    _is.read(rsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_get(rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<HttpCGIPrxCallback> HttpCGIPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class HttpCGIPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~HttpCGIPrxCallbackPromise(){}
    public:
        struct Promiseget: virtual public TC_HandleBase
        {
        public:
            HttpProto::st_cgi_rsp rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< HttpCGIPrxCallbackPromise::Promiseget > PromisegetPtr;

        HttpCGIPrxCallbackPromise(const promise::Promise< HttpCGIPrxCallbackPromise::PromisegetPtr > &promise)
        : _promise_get(promise)
        {}
        
        virtual void callback_get(const HttpCGIPrxCallbackPromise::PromisegetPtr &ptr)
        {
            _promise_get.setValue(ptr);
        }
        virtual void callback_get_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:get_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_get.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< HttpCGIPrxCallbackPromise::PromisegetPtr > _promise_get;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __HttpCGI_all[]=
            {
                "get"
            };

            pair<string*, string*> r = equal_range(__HttpCGI_all, __HttpCGI_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __HttpCGI_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_get_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    HttpCGIPrxCallbackPromise::PromisegetPtr ptr = new HttpCGIPrxCallbackPromise::Promiseget();

                    try
                    {
                        _is.read(ptr->rsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_get(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<HttpCGIPrxCallbackPromise> HttpCGIPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class HttpCGICoroPrxCallback: public HttpCGIPrxCallback
    {
    public:
        virtual ~HttpCGICoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __HttpCGI_all[]=
            {
                "get"
            };

            pair<string*, string*> r = equal_range(__HttpCGI_all, __HttpCGI_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __HttpCGI_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_get_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        HttpProto::st_cgi_rsp rsp;
                        _is.read(rsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_get(rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<HttpCGICoroPrxCallback> HttpCGICoroPrxCallbackPtr;

    /* proxy for client */
    class HttpCGIProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        void get(const HttpProto::st_cgi_req & cgi_req,HttpProto::st_cgi_rsp &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(cgi_req, 1);
            _os.write(rsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"get", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            _is.read(rsp, 2, true);
        }

        void async_get(HttpCGIPrxCallbackPtr callback,const HttpProto::st_cgi_req &cgi_req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(cgi_req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"get", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< HttpCGIPrxCallbackPromise::PromisegetPtr > promise_async_get(const HttpProto::st_cgi_req &cgi_req,const map<string, string>& context)
        {
            promise::Promise< HttpCGIPrxCallbackPromise::PromisegetPtr > promise;
            HttpCGIPrxCallbackPromisePtr callback = new HttpCGIPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(cgi_req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"get", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_get(HttpCGICoroPrxCallbackPtr callback,const HttpProto::st_cgi_req &cgi_req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(cgi_req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"get", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        HttpCGIProxy* tars_hash(int64_t key)
        {
            return (HttpCGIProxy*)ServantProxy::tars_hash(key);
        }

        HttpCGIProxy* tars_consistent_hash(int64_t key)
        {
            return (HttpCGIProxy*)ServantProxy::tars_consistent_hash(key);
        }

        HttpCGIProxy* tars_set_timeout(int msecond)
        {
            return (HttpCGIProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<HttpCGIProxy> HttpCGIPrx;

    /* servant for server */
    class HttpCGI : public tars::Servant
    {
    public:
        virtual ~HttpCGI(){}
        virtual void get(const HttpProto::st_cgi_req & cgi_req,HttpProto::st_cgi_rsp &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_get(tars::TarsCurrentPtr current, const HttpProto::st_cgi_rsp &rsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(rsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __HttpProto__HttpCGI_all[]=
            {
                "get"
            };

            pair<string*, string*> r = equal_range(__HttpProto__HttpCGI_all, __HttpProto__HttpCGI_all+1, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __HttpProto__HttpCGI_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    HttpProto::st_cgi_req cgi_req;
                    HttpProto::st_cgi_rsp rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("cgi_req", cgi_req);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else
                    {
                        _is.read(cgi_req, 1, true);
                        _is.read(rsp, 2, false);
                    }
                    get(cgi_req,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(rsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
